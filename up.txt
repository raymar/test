SCSFExport scsf_TradeUpload(SCStudyInterfaceRef sc)
{
	// Section 1 - Set the configuration variables
	SCSubgraphRef entry = sc.Subgraph[0];


	if (sc.SetDefaults)
	{
		// Set the configuration and defaults
		sc.GraphName = "up";
		sc.AutoLoop = 1;  // true
		//sc.UpdateAlways = 1;

		entry.Name = "up";
		entry.DrawStyle = DRAWSTYLE_BAR;
		entry.SecondaryColorUsed = 1;
		entry.PrimaryColor = RGB(0, 255, 0);
		entry.SecondaryColor = RGB(255, 0, 0);

		sc.Input[0].Name = "Povolit Upload";
		sc.Input[0].SetYesNo(1);

		sc.Input[1].Name = "User ID";
		sc.Input[1].SetInt(0);

		sc.Input[2].Name = "User Password";
		sc.Input[2].SetInt(0);

		return;



	}

	int& k = sc.GetPersistentInt(0);
	int& pocet = sc.GetPersistentInt(1);
	SCDateTime& checktime = sc.GetPersistentSCDateTime(0);
	int typ;

	s_SCPositionData PositionData;
	sc.GetTradePosition(PositionData);
	SCDateTime ExitTime;
	SCDateTime Time;
	long long& cas = sc.GetPersistentInt64(0);
	SCString& sac = sc.GetPersistentSCString(0);
	float AvgPrice;
	//s_SCTradeOrder Order;
	
	if ( PositionData.PositionQuantity == 0  ){
		if (k!=0){ //konec vstupu - uploaduj result
			
			entry[sc.Index] = -1;
			

			std::vector <s_ACSTrade> TradesList;
			s_ACSTrade TradeEntry;
			int Size = sc.GetTradeListSize();

			if (sc.GetTradeListEntry(Size - 1, TradeEntry))
				TradesList.push_back(TradeEntry);
			
			// vzsledek
		
			SCDateTime	CloseDateTime = TradesList[0].CloseDateTime;
			int	TradeType = TradesList[0].TradeType;
			int	EntryQuantity = TradesList[0].EntryQuantity;
			int	ExitQuantity = TradesList[0].ExitQuantity;
			int	MaxOpenQuantity = TradesList[0].MaxOpenQuantity;
			double	AverageEntryPrice = TradesList[0].AverageEntryPrice;
			double	AverageExitPrice = TradesList[0].AverageExitPrice;
			double	OpenProfitLoss = TradesList[0].OpenProfitLoss;
			double	ClosedProfitLoss = TradesList[0].ClosedProfitLoss;
			double	MaximumOpenPositionLoss = TradesList[0].MaximumOpenPositionLoss;
			double	MaximumOpenPositionProfit = TradesList[0].MaximumOpenPositionProfit;
			double	MaximumRunup = TradesList[0].MaximumRunup;
			double	MaximumDrawdown = TradesList[0].MaximumDrawdown;
			double	Commission = TradesList[0].Commission;
			
			SCDateTime CheckTime = sc.AdjustDateTimeToGMT(checktime);
			int ms;
			struct tm t = { 0 };
			CheckTime.GetDateTimeYMDHMS_MS(t.tm_year, t.tm_mon, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec, ms);
			t.tm_year = t.tm_year - 1900;
			t.tm_mon = t.tm_mon - 1;
			t.tm_hour = t.tm_hour + 1;
			t.tm_sec = t.tm_hour - 1;
			t.tm_isdst = -1;
			time_t timeSinceEpoch = mktime(&t);
			timeSinceEpoch = timeSinceEpoch * 1000 + ms;

			// prevod na stringy pro formular
			std::string timeint = std::to_string(timeSinceEpoch);
			char const *stime = timeint.c_str();

			std::string pt = std::to_string(ClosedProfitLoss);
			char const *PT = pt.c_str();


			CURL *curl;
			CURLcode res;

			//std::string s = std::to_string(42);

			struct curl_httppost *formpost = NULL;
			struct curl_httppost *lastptr = NULL;
			struct curl_slist *headerlist = NULL;
			static const char buf[] = "Expect:";

			curl_global_init(CURL_GLOBAL_ALL);

		

			/* Fill in the submit field too, even if this is rarely needed */
			curl_formadd(&formpost,
				&lastptr,
				CURLFORM_COPYNAME, "pt",
				CURLFORM_COPYCONTENTS, PT,
				CURLFORM_END);

			/* Fill in the submit field too, even if this is rarely needed */
			curl_formadd(&formpost,
				&lastptr,
				CURLFORM_COPYNAME, "timecheck",
				CURLFORM_COPYCONTENTS, stime,
				CURLFORM_END);

			curl = curl_easy_init();
			/* initialize custom header list (stating that Expect: 100-continue is not
			wanted */
			headerlist = curl_slist_append(headerlist, buf);
			if (curl) {
				/* what URL that receives this POST */
				curl_easy_setopt(curl, CURLOPT_URL, "http://order-flow.cz/webservice.php");
				//if((argc == 2) && (!strcmp(argv[1], "noexpectheader")))
				/* only disable 100-continue header if explicitly requested */
				curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headerlist);
				curl_easy_setopt(curl, CURLOPT_HTTPPOST, formpost);

				/* Perform the request, res will get the return code */
				res = curl_easy_perform(curl);
				/* Check for errors */
				if (res != CURLE_OK)
					fprintf(stderr, "curl_easy_perform() failed: %s\n",
						curl_easy_strerror(res));

				/* always cleanup */
				curl_easy_cleanup(curl);

				/* then cleanup the formpost chain */
				curl_formfree(formpost);
				/* free slist */
				curl_slist_free_all(headerlist);
			}




		}
		k = 0;
	}
	
	if ( PositionData.PositionQuantity != 0 ){
		if (PositionData.PositionQuantity > 0) {
			typ = 1;
			if (k != 0 && PositionData.PositionQuantity > k) {
				pocet++;
			}
		}
		if (PositionData.PositionQuantity < 0) {
			typ = -1;
			if (k != 0 && PositionData.PositionQuantity < k) {
				pocet++;
			}
		}
		if (k==0){ //prvni vstup do obchodu tady provedu upload
			
			pocet = 1;
			int UserID = sc.Input[1].GetInt();
			//int BarTime = sc.BaseDateTimeIn.TimeAt(sc.Index);
			
			//Time = Order.EntryDateTime;
			
			//std::string s = std::to_string(typ);
			
			AvgPrice = PositionData.AveragePrice;
			Time = PositionData.LastEntryDateTime;
			checktime = PositionData.LastEntryDateTime;
			Time = sc.AdjustDateTimeToGMT(Time);
			SCString Symbol = PositionData.Symbol;
			
			  //std::time_t t = std::time(0);
			int ms;
			struct tm t = { 0 };
			Time.GetDateTimeYMDHMS_MS(t.tm_year, t.tm_mon, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec, ms);
			t.tm_year = t.tm_year - 1900;
			t.tm_mon = t.tm_mon - 1;
			t.tm_hour = t.tm_hour + 1;
			t.tm_sec = t.tm_hour - 1;
			t.tm_isdst = -1;

			time_t timeSinceEpoch = mktime(&t);
			
			//long int timecheck = static_cast<long int> (timeSinceEpoch(NULL));
			timeSinceEpoch = timeSinceEpoch * 1000 + ms;
			
			
			entry[sc.Index] = 1;
			

			
			

			
		
			

			  std::string typeint = std::to_string(typ);
		  	  char const *stype = typeint.c_str(); 

			  std::string timeint = std::to_string(timeSinceEpoch);
		  	  char const *stime = timeint.c_str(); 
		
			  std::string idint = std::to_string(UserID);
		  	  char const *sid = idint.c_str(); 

			  std::string avgpr = std::to_string(AvgPrice);
			  char const *avgprice = avgpr.c_str();

			  std::string sym = Symbol;
			  char const *Sym = sym.c_str();

			  

			 
			
			  CURL *curl;
			  CURLcode res;

			  //std::string s = std::to_string(42);

			  struct curl_httppost *formpost=NULL;
			  struct curl_httppost *lastptr=NULL;
			  struct curl_slist *headerlist=NULL;
			  static const char buf[] = "Expect:";
 
			  curl_global_init(CURL_GLOBAL_ALL);
 
			  /* Fill in the filename field */ 
			  curl_formadd(&formpost,
						   &lastptr,
						   CURLFORM_COPYNAME, "userid",
						   CURLFORM_COPYCONTENTS, sid,
						   CURLFORM_END);
			  /* Fill in the filename field */ 
			  curl_formadd(&formpost,
						   &lastptr,
						   CURLFORM_COPYNAME, "time",
						   CURLFORM_COPYCONTENTS, stime,
						   CURLFORM_END);
			  /* Fill in the filename field */ 
			  curl_formadd(&formpost,
						   &lastptr,
						   CURLFORM_COPYNAME, "type",
						   CURLFORM_COPYCONTENTS, stype  ,
						   CURLFORM_END);
			  /* Fill in the submit field too, even if this is rarely needed */
			  curl_formadd(&formpost,
						   &lastptr,
						   CURLFORM_COPYNAME, "price",
						   CURLFORM_COPYCONTENTS, avgprice,
						   CURLFORM_END);
			  /* Fill in the submit field too, even if this is rarely needed */
			  curl_formadd(&formpost,
						  &lastptr,
						  CURLFORM_COPYNAME, "symbol",
						  CURLFORM_COPYCONTENTS, Sym,
						  CURLFORM_END);

			

			  curl = curl_easy_init();
			  /* initialize custom header list (stating that Expect: 100-continue is not
				 wanted */ 
			  headerlist = curl_slist_append(headerlist, buf);
			  if(curl) {
				/* what URL that receives this POST */ 
				curl_easy_setopt(curl, CURLOPT_URL, "http://order-flow.cz/webservice.php");
				//if((argc == 2) && (!strcmp(argv[1], "noexpectheader")))
				  /* only disable 100-continue header if explicitly requested */ 
				  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headerlist);
				curl_easy_setopt(curl, CURLOPT_HTTPPOST, formpost);
 
				/* Perform the request, res will get the return code */ 
				res = curl_easy_perform(curl);
				/* Check for errors */ 
				if(res != CURLE_OK)
				  fprintf(stderr, "curl_easy_perform() failed: %s\n",
						  curl_easy_strerror(res));
 
				/* always cleanup */ 
				curl_easy_cleanup(curl);
 
				/* then cleanup the formpost chain */ 
				curl_formfree(formpost);
				/* free slist */ 
				curl_slist_free_all (headerlist);
			  }
			 


		}	
		k = PositionData.PositionQuantity;
	}
} 
